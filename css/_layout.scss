@mixin content-grid-columns($padding-inline, $content-max-width, $breakout-max-width) {
  $breakout-size: calc(($breakout-max-width - $content-max-width) / 2);

  display: grid;

  grid-template-columns:
    [full-width-start] minmax(#{$padding-inline}, 1fr)
    [breakout-start] minmax(0, #{$breakout-size})
    [content-start] minmax(0, min(calc(100% - (#{$padding-inline} * 2)), #{$content-max-width})) [content-end]
    minmax(0, #{$breakout-size}) [breakout-end]
    minmax(#{$padding-inline}, 1fr) [full-width-end];
}
  // This will set up named areas full-width, breakout, and content that can be applied easily to any item

.content-grid {
  @include content-grid-columns(2rem, 70ch, 85ch);

  // Nesting grid column rules inside .content-grid
  > :not(.breakout, .full-width),
  .full-width > :not(.breakout, .full-width) {
    grid-column: content;
  }

  > .breakout {
    grid-column: breakout;

    @media screen and (max-width: 525px) {
      grid-column: full-width;
    }
  }

  > .full-width {
    grid-column: full-width;
  }

  @media screen and (max-width: 725px) {
    @include content-grid-columns(1rem, 90vw, 100vw);
  }
}


#hangman {
  display: flex;
  flex-direction: row;
  @media screen and (max-width: 500px) {
    flex-direction: column;
  }
}

#map {
  flex-basis: 80%;
}
